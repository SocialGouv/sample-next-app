#!/usr/bin/env bash
set -e

if [ -n "$(kubectl -n $NAMESPACE get secret $DB_SECRET_NAME 2>/dev/null)" ]; then
  echo "secret named '$DB_SECRET_NAME' already exists in namespace '$NAMESPACE'"
  exit 0
fi

PGPASSWORD=$(openssl rand -base64 32 | sed "s/[^[:alnum:]-]//g")

PGHOST=$(kubectl -n $SECRETS_NAMESPACE get secrets $ADMIN_PG_SECRET -o jsonpath="{.data.PGHOST}" | base64 --decode)
PGPORT=$(kubectl -n $SECRETS_NAMESPACE get secrets $ADMIN_PG_SECRET -o jsonpath="{.data.PGPORT}" | base64 --decode)

# autodetect azure add suffix
if [ "$PG_USER_ADD_HOST_SUFFIX" != "false" ] && [[ $PGHOST == *"azure.com"* ]]; then
  PG_USER_ADD_HOST_SUFFIX="true"
fi

if [ "$PG_USER_ADD_HOST_SUFFIX" ] && [ "$PG_USER_ADD_HOST_SUFFIX" != "false" ]; then
  PGUSER_SUFFIX="@${PGHOST}"
else
  PGUSER_SUFFIX=""
fi

if [ "$SOCIALGOUV_PRODUCTION" ]; then
  PGDATABASE=$SOCIALGOUV_PRODUCTION_NAMESPACE
  PGUSER=$SOCIALGOUV_PRODUCTION_NAMESPACE
elif [ "$SOCIALGOUV_PREPRODUCTION" ]; then
  PGDATABASE="preprod"
  PGUSER="preprod${PGUSER_SUFFIX}"
else
  PGDATABASE="autodevops_${BRANCH_SLUG}"
  PGUSER="user_${BRANCH_SLUG}${PGUSER_SUFFIX}"
fi

PGSSLMODE=require
DATABASE_URL=postgresql://${PGUSER/@/%40}:${PGPASSWORD/@/%40}@${PGHOST}/${PGDATABASE}?sslmode=${PGSSLMODE}

kubectl -n $NAMESPACE create secret generic $DB_SECRET_NAME \
  --from-literal="PGPASSWORD=$PGPASSWORD" \
  --from-literal="PGSSLMODE=$PGSSLMODE" \
  --from-literal="HASURA_GRAPHQL_DATABASE_URL=$DATABASE_URL" \
  --from-literal="DATABASE_URL=$DATABASE_URL" \
  --from-literal="PGDATABASE=$PGDATABASE" \
  --from-literal="PGHOST=$PGHOST" \
  --from-literal="PGPORT=$PGPORT" \
  --from-literal="PGUSER=$PGUSER"
