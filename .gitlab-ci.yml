#
# Context investigation
#
# - master as prod
# - features branches env
#

stages:
  - Code Quality
  - Registration
  - Deploy
  - Notify Finished Deployment

#
#
#

include:
  - "https://raw.githubusercontent.com/SocialGouv/gitlab-ci-yml/v2.0.0/base_create_namespace_stage.yml"
  - "https://raw.githubusercontent.com/SocialGouv/gitlab-ci-yml/v2.0.0/base_deploy_nodejs_chart_stage.yml"
  - "https://raw.githubusercontent.com/SocialGouv/gitlab-ci-yml/v2.0.0/base_docker_helm_image_stage.yml"
  - "https://raw.githubusercontent.com/SocialGouv/gitlab-ci-yml/v2.0.0/base_docker_kubectl_image_stage.yml"
  - "https://raw.githubusercontent.com/SocialGouv/gitlab-ci-yml/v2.0.0/base_semantic_release_stage.yml"
  - "https://raw.githubusercontent.com/SocialGouv/gitlab-ci-yml/v2.0.0/register-stage.yml"

#

variables:
  PROJECT: "sample-next-app"
  RANCHER_PROJECT_ID: "c-gsm8d:p-pwpk6"
  DEV_ENVIRONMENT_NAME: "fabrique-dev"
  PROD_ENVIRONMENT_NAME: "prod"
  SERVICE_PORT: 4000


.resolve_env_domain: &resolve_env_domain |
  sh -x

  export BRANCH_NAME=${BRANCH_NAME:=$CI_COMMIT_REF_SLUG}
  export HASH_SIZE=${HASH_SIZE:=7}
  export K8S_PROJECT=${K8S_PROJECT:=$PROJECT}

  BRANCH_NAME_HASHED=$( printf "${BRANCH_NAME}" | sha1sum | cut -c1-${HASH_SIZE} )
  export BRANCH_HASH=${BRANCH_HASH:="$BRANCH_NAME_HASHED"}

  export K8S_NAMESPACE="${PROJECT}-feature-${BRANCH_HASH}"

  if [[ "${BRANCH_NAME}" = "master" ]]; then
    export BRANCH_HASH=prod
    export K8S_NAMESPACE="${PROJECT}-${BRANCH_HASH}"
    export DOMAIN="${PROJECT}.fabrique.social.gouv.fr"
  else
    export DOMAIN="${BRANCH_HASH}-${PROJECT}.dev.fabrique.social.gouv.fr"
  fi

  export FRONTEND_HOST="${DOMAIN}"
  export FRONTEND_URL="https://${FRONTEND_HOST}"

#
#
#

###########################################
###       QUALITY                       ###
###########################################

#

Quality tests:
  stage: Code Quality
  image: node:12-alpine
  before_script:
    - yarn --frozen-lockfile
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules
  script:
    - yarn lint
    - yarn test

Build:
  stage: Code Quality
  image: node:12-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules
  before_script:
    - yarn --frozen-lockfile
  script:
    - yarn build
  artifacts:
    expire_in: 30 minutes
    paths:
      - .next

#
#
#

Release:
  extends: .base_semantic_release_stage
  stage: Registration

###########################################
###       REGISTER                      ###
###########################################

#

Register image:
  extends: .base_register_stage
  stage: Registration
  dependencies:
    - Build
  needs:
    - Build
  variables:
    CONTEXT: .
    DOCKERFILE_PATH: Dockerfile
    IMAGE_NAME: $CI_REGISTRY_IMAGE

#

Create namespace:
  extends: .base_create_namespace_stage
  only:
    refs:
      - branches
  except:
    refs:
      - tags
      - master
  before_script:
    - *resolve_env_domain
    - kubectl delete namespace ${K8S_NAMESPACE} || true
  after_script:
    - *resolve_env_domain
    - kubectl label namespace ${K8S_NAMESPACE} cert=wildcard

#
#
#

###########################################
###            DEPLOY TO K8S            ###
###########################################

#

.deploy_sample-next-app_stage: &deploy_sample-next-app_stage
  stage: Deploy
  extends: .base_deploy_nodejs_chart_stage
  dependencies: []
  variables:
    REGISTRY: $CI_REGISTRY_IMAGE
    IMAGE_TAG: $CI_COMMIT_SHA
    PORT: $SERVICE_PORT
    CONTEXT: app
    VALUES_FILE: ./.k8s/app.values.yml
  before_script:
    - *resolve_env_domain
    - HOST=${FRONTEND_HOST}
    - >-
      HELM_RENDER_ARGS="
        --set image.tag=${IMAGE_TAG}
        --set ingress.hosts[0].host=${HOST}
        --set ingress.tls[0].hosts[0]=${HOST}"
    - |-
      if [[ "${BRANCH_NAME}" = "master" ]]; then
        HELM_RENDER_ARGS=" \
          ${HELM_RENDER_ARGS} \
          --set ingress.annotations.certmanager\.k8s\.io/cluster-issuer=letsencrypt-prod \
          --set-string ingress.annotations.kubernetes\.io/tls-acme=true \
          --set ingress.tls[0].secretName=${PROJECT}-certificate"
      fi

#

Deploy @sample-next-app (dev):
  <<: *deploy_sample-next-app_stage
  only:
    - branches
  except:
    - master
  environment:
    name: $DEV_ENVIRONMENT_NAME

Deploy @sample-next-app (prod):
  <<: *deploy_sample-next-app_stage
  only:
    - master
  environment:
    name: $PROD_ENVIRONMENT_NAME

#
#
#

###########################################
###            Notify                   ###
###########################################

#

.notify_stage: &notify_stage
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/git-deploy:0.15.0
  dependencies: []

.notify_pending_stage: &notify_pending_stage
  <<: *notify_stage
  script:
    #
    - create-deployment
    - cat /tmp/deploy_payload.json
    #
    - extract-deploy-id
    - echo "GitHub deployment id '$(cat DEPLOY_ID)'"
  artifacts:
    expire_in: 1 hour
    paths:
      - DEPLOY_ID

.resolve_deploy_environment: &resolve_deploy_environment |
  set -x

  if [[ "${BRANCH_NAME}" = "master" ]]; then
    export ENVIRONMENT="production"
  else
    export ENVIRONMENT="staging"
  fi

.notify_fail_stage: &notify_fail_stage
  <<: *notify_stage
  allow_failure: true
  when: on_failure
  script:
    - *resolve_env_domain
    - *resolve_deploy_environment
    - update-deployment $(cat DEPLOY_ID) "${FRONTEND_URL}" failure

.notify_success_stage: &notify_success_stage
  <<: *notify_stage
  when: on_success
  script:
    - *resolve_env_domain
    - *resolve_deploy_environment
    - update-deployment $(cat DEPLOY_ID) "${FRONTEND_URL}" success

#

Notify Starting Deployment:
  <<: *notify_pending_stage
  stage: Deploy

Notify Fail:
  <<: *notify_fail_stage
  stage: Notify Finished Deployment
  dependencies:
    - Notify Starting Deployment

Notify Success:
  <<: *notify_success_stage
  stage: Notify Finished Deployment
  dependencies:
    - Notify Starting Deployment

###########################################
###         Delete namespaces           ###
###########################################

#

Delete useless k8s namespaces:
  stage: Notify Finished Deployment
  dependencies: []
  allow_failure: true
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/k8s-ns-killer:0.13.0
  environment: fabrique-dev
  script:
    - git remote set-url origin https://github.com/${CI_PROJECT_PATH}.git
    # - k8s-ns-killer ${PROJECT}-feature
    # Debug mode
    - sh -x /bin/k8s-ns-killer ${PROJECT}-feature
  only:
    - master
